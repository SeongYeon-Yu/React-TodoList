{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lg\\\\Desktop\\\\project\\\\todo-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useCallback } from 'react';\nimport TodoTemplate from './TodoTemplate';\nimport TodoInsert from './TodoInsert';\nimport TodoList from './TodoList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createBulkTodos() {\n  const array = [];\n\n  for (let i = 1; i <= 2500; i++) {\n    array.push({\n      id: i,\n      text: `할 일 ${i}`,\n      checked: false\n    });\n  }\n\n  return array;\n}\n\nconst App = () => {\n  _s();\n\n  const [todos, setTodos] = useState(createBulkTodos); // 고유 값으로 사용 될 id\n  // ref 를 사용하여 변수 담기\n\n  const nextId = useRef(4);\n  const onInsert = useCallback(text => {\n    const todo = {\n      id: nextId.current,\n      text,\n      checked: false\n    };\n    setTodos(todos => todos.concat(todo));\n    nextId.current += 1; // nextId 1 씩 더하기\n  }, []);\n  const onRemove = useCallback(id => {\n    setTodos(todos => todos.filter(todo => todo.id !== id));\n  }, []);\n  const onToggle = useCallback(id => {\n    setTodos(todos => todos.map(todo => todo.id === id ? { ...todo,\n      checked: !todo.checked\n    } : todo));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TodoTemplate, {\n    children: [/*#__PURE__*/_jsxDEV(TodoInsert, {\n      onInsert: onInsert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      todos: todos,\n      onRemove: onRemove,\n      onToggle: onToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"19jPfAucTjmKWf5YvbgDjRVyPZE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/lg/Desktop/project/todo-app/src/App.js"],"names":["React","useRef","useState","useCallback","TodoTemplate","TodoInsert","TodoList","createBulkTodos","array","i","push","id","text","checked","App","todos","setTodos","nextId","onInsert","todo","current","concat","onRemove","filter","onToggle","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,WAAlC,QAAqD,OAArD;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,SAASC,eAAT,GAA2B;AACzB,QAAMC,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,IAArB,EAA2BA,CAAC,EAA5B,EAAgC;AAC9BD,IAAAA,KAAK,CAACE,IAAN,CAAW;AACTC,MAAAA,EAAE,EAAEF,CADK;AAETG,MAAAA,IAAI,EAAG,OAAMH,CAAE,EAFN;AAGTI,MAAAA,OAAO,EAAE;AAHA,KAAX;AAKD;;AACD,SAAOL,KAAP;AACD;;AAED,MAAMM,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAACK,eAAD,CAAlC,CADgB,CAGhB;AACA;;AACA,QAAMU,MAAM,GAAGhB,MAAM,CAAC,CAAD,CAArB;AAEA,QAAMiB,QAAQ,GAAGf,WAAW,CAACS,IAAI,IAAI;AACnC,UAAMO,IAAI,GAAG;AACXR,MAAAA,EAAE,EAAEM,MAAM,CAACG,OADA;AAEXR,MAAAA,IAFW;AAGXC,MAAAA,OAAO,EAAE;AAHE,KAAb;AAKAG,IAAAA,QAAQ,CAACD,KAAK,IAAIA,KAAK,CAACM,MAAN,CAAaF,IAAb,CAAV,CAAR;AACAF,IAAAA,MAAM,CAACG,OAAP,IAAkB,CAAlB,CAPmC,CAOd;AACtB,GAR2B,EAQzB,EARyB,CAA5B;AAUA,QAAME,QAAQ,GAAGnB,WAAW,CAACQ,EAAE,IAAI;AACjCK,IAAAA,QAAQ,CAACD,KAAK,IAAIA,KAAK,CAACQ,MAAN,CAAaJ,IAAI,IAAIA,IAAI,CAACR,EAAL,KAAYA,EAAjC,CAAV,CAAR;AACD,GAF2B,EAEzB,EAFyB,CAA5B;AAIA,QAAMa,QAAQ,GAAGrB,WAAW,CAACQ,EAAE,IAAI;AACjCK,IAAAA,QAAQ,CAACD,KAAK,IACZA,KAAK,CAACU,GAAN,CAAUN,IAAI,IACZA,IAAI,CAACR,EAAL,KAAYA,EAAZ,GAAiB,EAAE,GAAGQ,IAAL;AAAWN,MAAAA,OAAO,EAAE,CAACM,IAAI,CAACN;AAA1B,KAAjB,GAAuDM,IADzD,CADM,CAAR;AAKD,GAN2B,EAMzB,EANyB,CAA5B;AAQA,sBACE,QAAC,YAAD;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAED;AAAtB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEH,KAAjB;AAAwB,MAAA,QAAQ,EAAEO,QAAlC;AAA4C,MAAA,QAAQ,EAAEE;AAAtD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAnCD;;GAAMV,G;;KAAAA,G;AAqCN,eAAeA,GAAf","sourcesContent":["import React, { useRef, useState, useCallback } from 'react';\nimport TodoTemplate from './TodoTemplate';\nimport TodoInsert from './TodoInsert';\nimport TodoList from './TodoList';\n\nfunction createBulkTodos() {\n  const array = [];\n  for (let i = 1; i <= 2500; i++) {\n    array.push({\n      id: i,\n      text: `할 일 ${i}`,\n      checked: false,\n    });\n  }\n  return array;\n}\n\nconst App = () => {\n  const [todos, setTodos] = useState(createBulkTodos);\n\n  // 고유 값으로 사용 될 id\n  // ref 를 사용하여 변수 담기\n  const nextId = useRef(4);\n\n  const onInsert = useCallback(text => {\n    const todo = {\n      id: nextId.current,\n      text,\n      checked: false,\n    };\n    setTodos(todos => todos.concat(todo));\n    nextId.current += 1; // nextId 1 씩 더하기\n  }, []);\n\n  const onRemove = useCallback(id => {\n    setTodos(todos => todos.filter(todo => todo.id !== id));\n  }, []);\n\n  const onToggle = useCallback(id => {\n    setTodos(todos =>\n      todos.map(todo =>\n        todo.id === id ? { ...todo, checked: !todo.checked } : todo,\n      ),\n    );\n  }, []);\n\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert} />\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\n    </TodoTemplate>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}